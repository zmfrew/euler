/*
 The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

  1: 1
  3: 1,3
  6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?
 */

/*
 Explanation:
 
 - Create computed variable to calculate the triangle number.
 - Create computed variable to calculate all factors of the given number.
 - Loop until the triangle number's factor count is 500.
 */
import Foundation

extension Int {
    var triangleNumber: Int {
        self * (self + 1) / 2
    }
    
    var factors: [Int] {
        let root = Int(floor(sqrt(Double(self))))
        var factors = [Int]()
        for i in 1...root {
            if self % i == 0 {
                factors.append(i)
            }
        }
        
        var i = factors.count - 1
        if factors[i] * factors[i] == self {
            i -= 1
        }
        while i >= 0 {
            factors.append(self / factors[i])
            i -= 1
        }
        
        return factors
    }
    
    var factorsTriangleNumber: Int {
        var count = 1
        while count.triangleNumber.factors.count < self {
            count += 1
        }
        
        return count.triangleNumber
    }
}

500.factorsTriangleNumber
