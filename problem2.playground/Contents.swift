import Foundation

/*
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

/*
 Solution Explanation:
 
 - We are given the starting numbers of 1 and 2.
 - We set index to 1, so it does not go out of bounds on the first iteration with arr[index - 1]
 - We set sum to 2 because it is the only positive number in arr to start.
 - We add the previous two numbers together using reduce, which works because there are only 2 numbers in arr.
 In while loop body:
 - Set next to the sum of the previous 2 values.
 - Conditional to only add even numbers.
 */

extension Int {
    func evenFibonacciSum() -> Int {
        var arr = [1, 2]
        var index = 1
        var sum = 2
        var next = arr.reduce(0, +)
        
        while next <= self {
            next = arr[index] + arr[index - 1] // Sum the previous 2 values for next
            
            if next % 2 == 0 {
                sum += next // Only add even numbers
            }
            
            arr.append(next)
            index += 1
        }
        
        return sum
    }
}

4000000.evenFibonacciSum()
